from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Table
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ORM
Base = declarative_base()
engine = create_engine('sqlite:///students.db')
Session = sessionmaker(bind=engine)
session = Session()

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–∏—Ö
# –ë–∞–≥–∞—Ç–æ-–¥–æ-–±–∞–≥–∞—Ç—å–æ—Ö: —Å—Ç—É–¥–µ–Ω—Ç–∏ ‚Üî –∫—É—Ä—Å–∏
student_course = Table(
    'student_course', Base.metadata,
    Column('student_id', ForeignKey('students.id'), primary_key=True),
    Column('course_id', ForeignKey('courses.id'), primary_key=True)
)

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    courses = relationship('Course', secondary=student_course, back_populates='students')

class Course(Base):
    __tablename__ = 'courses'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    students = relationship('Student', secondary=student_course, back_populates='courses')

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
Base.metadata.create_all(engine)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
def seed_data():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
    course_titles = ['Math', 'Physics', 'History', 'Biology', 'Programming']
    courses = [Course(title=title) for title in course_titles]
    session.add_all(courses)
    session.commit()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ —Ä–∞–Ω–¥–æ–º–Ω–∏–º–∏ –∫—É—Ä—Å–∞–º–∏
    for i in range(1, 21):
        student = Student(name=f'Student {i}')
        student.courses = random.sample(courses, k=random.randint(1, 3))
        session.add(student)
    session.commit()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞
def add_student(name, course_title):
    course = session.query(Course).filter_by(title=course_title).first()
    if not course:
        print("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    new_student = Student(name=name)
    new_student.courses.append(course)
    session.add(new_student)
    session.commit()
    print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∞ '{name}' –¥–æ–¥–∞–Ω–æ –¥–æ –∫—É—Ä—Å—É '{course_title}'.")

# –ó–∞–ø–∏—Ç–∏
def students_in_course(course_title):
    course = session.query(Course).filter_by(title=course_title).first()
    if course:
        return [student.name for student in course.students]
    return []

def courses_of_student(student_name):
    student = session.query(Student).filter_by(name=student_name).first()
    if student:
        return [course.title for course in student.courses]
    return []

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
def update_student_name(old_name, new_name):
    student = session.query(Student).filter_by(name=old_name).first()
    if student:
        student.name = new_name
        session.commit()
        print(f"üîÑ –Ü–º‚Äô—è –æ–Ω–æ–≤–ª–µ–Ω–æ: {old_name} ‚Üí {new_name}")
    else:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def delete_student(name):
    student = session.query(Student).filter_by(name=name).first()
    if student:
        session.delete(student)
        session.commit()
        print(f"üóëÔ∏è –°—Ç—É–¥–µ–Ω—Ç–∞ '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–ª–∏–∫—ñ–≤
if __name__ == "__main__":
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
    seed_data()

    add_student("Vitalii", "Programming")

    print("üìò –ö—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ 'Vitalii':", courses_of_student("Vitalii"))
    print("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–∞ –∫—É—Ä—Å—ñ 'Math':", students_in_course("Math"))

    update_student_name("Vitalii", "Vitalii Pro")
    delete_student("Student 3")